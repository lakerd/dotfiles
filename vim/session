let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
imap <S-Tab> 
inoremap <silent> <Plug>allmlXmlV ="&#".getchar().";"
map! <S-Insert> <MiddleMouse>
smap 	 i<BS>	
map  o
vnoremap ) s(  )<Left>P<Right><Right>%
map Q gq
xmap S <Plug>VSurround
vmap [% [%m'gv``
nmap <silent> \ups :call Perl_RemoveGuiMenus()
nmap <silent> \lps :call Perl_CreateGuiMenus()
nmap \sh <Plug>DBHistory
nmap \slv <Plug>DBListView
nmap \slp <Plug>DBListProcedure
nmap \slt <Plug>DBListTable
vmap <silent> \slc :exec 'DBListColumn '.DB_getVisualBlock()
nmap \slc <Plug>DBListColumn
nmap \sbp <Plug>DBPromptForBufferParameters
nmap \sdpa <Plug>DBDescribeProcedureAskName
vmap <silent> \sdp :exec 'DBDescribeProcedure '.DB_getVisualBlock()
nmap \sdp <Plug>DBDescribeProcedure
nmap \sdta <Plug>DBDescribeTableAskName
vmap <silent> \sdt :exec 'DBDescribeTable '.DB_getVisualBlock()
nmap \sdt <Plug>DBDescribeTable
nmap \sta <Plug>DBSelectFromTableAskName
nmap \stw <Plug>DBSelectFromTableWithWhere
vmap <silent> \st :exec 'DBSelectFromTable '.DB_getVisualBlock()
nmap \st <Plug>DBSelectFromTable
nmap <silent> \sel :.,.DBExecRangeSQL
nmap <silent> \sea :1,$DBExecRangeSQL
nmap \se <Plug>DBExecSQLUnderCursor
vmap \se <Plug>DBExecVisualSQL
map <silent> \f <Plug>SimpleFold_Foldsearch
vmap ]% ]%m'gv``
vnoremap ] s[  ]<Left>P<Right><Right>%
vmap a% [%v]%
nmap cs <Plug>Csurround
nmap ds <Plug>Dsurround
nmap gx <Plug>NetrwBrowseX
xmap s <Plug>Vsurround
nmap ySS <Plug>YSsurround
nmap ySs <Plug>YSsurround
nmap yss <Plug>Yssurround
nmap yS <Plug>YSurround
nmap ys <Plug>Ysurround
vnoremap } s{  }<Left>P<Right><Right>%
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetBrowseX(expand("<cWORD>"),0)
map <S-CR> O
noremap <silent> <F8> :cn
noremap <silent> <F7> :cp
map <F3> :NERDTree
map <M-Right> :bn
map <M-Left> :bp
map <S-Insert> <MiddleMouse>
imap S <Plug>ISurround
imap s <Plug>Isurround
imap 	 <Plug>Jumper
imap  <Plug>Isurround
imap  =CtrlXPP()
inoremap " ""<Left>
inoremap ' ''<Left>
inoremap ( ()<Left>
inoremap [ []<Left>
inoremap { {}<Left>
inoremap } {}<Left><Up>	
let &cpo=s:cpo_save
unlet s:cpo_save
set autochdir
set autoindent
set autoread
set autowrite
set background=dark
set backspace=indent,eol,start
set backup
set backupdir=~/backups
set browsedir=current
set cmdheight=2
set complete=.,w,b,u,t,i,k
set directory=~/backups
set expandtab
set fileencodings=ucs-bom,utf-8,default,latin1
set helplang=en
set history=50
set hlsearch
set ignorecase
set incsearch
set isfname=@,48-57,/,.,-,_,+,,,#,$,%,~,=,:
set matchpairs=(:),{:},[:],<:>
set mouse=c
set pastetoggle=<F2>
set printoptions=paper:letter
set ruler
set runtimepath=~/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim71,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,~/.vim/after
set shiftround
set shiftwidth=4
set showcmd
set smartcase
set smarttab
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
set tabstop=4
set termencoding=utf-8
set textwidth=78
set visualbell
set wildignore=*.bak,*.o,*.e,*~
set wildmenu
set wildmode=list,longest
set window=42
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/work/OO_convert/convert_from_roundcube
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +112 convert_from_roundcube.pl
badd +4 attachments/converted/28939.txt
badd +1 attachments/raw
badd +2 attachments/converted/Jones-RapidGameDev.txt
args convert_from_roundcube.pl
edit convert_from_roundcube.pl
set splitbelow splitright
set nosplitbelow
set nosplitright
wincmd t
set winheight=1 winwidth=1
argglobal
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <silent> <F9> :call Perl_Debugger()
imap <buffer> <silent> <S-F1> :call Perl_perldoc()
imap <buffer> <silent> <S-F9> :call Perl_Arguments()
imap <buffer> <silent> <C-F9> :call Perl_Run()
imap <buffer> <silent> <M-F9> :call Perl_SyntaxCheck():redraw!:call Perl_SyntaxCheckMsg()
nmap <buffer> <silent> \rh :call Perl_Hardcopy("n")
nmap <buffer> <silent> \ry :call Perl_Perltidy("n")
map <buffer> <silent> \ro :call Perl_Toggle_Gvim_Xterm()
map <buffer> <silent> \rx :call Perl_XtermSize()
map <buffer> <silent> \rk :call Perl_Settings()
vmap <buffer> <silent> \rh :call Perl_Hardcopy("v")
omap <buffer> <silent> \rh :call Perl_Hardcopy("n")
map <buffer> <silent> \rt :call Perl_SaveWithTimestamp()
map <buffer> <silent> \rc :call Perl_Perlcritic():redraw:call Perl_PerlcriticMsg()
map <buffer> <silent> \rm :call Perl_Smallprof()
vmap <buffer> <silent> \ry :call Perl_Perltidy("v")
omap <buffer> <silent> \ry :call Perl_Perltidy("n")
map <buffer> <silent> \rg :call Perl_perldoc_generate_module_list():redraw!
map <buffer> <silent> \ri :call Perl_perldoc_show_module_list()
map <buffer> <silent> \h :call Perl_perldoc()
map <buffer> <silent> \rp :call Perl_perldoc()
noremap <buffer> <silent> \re :call Perl_MakeScriptExecutable()
noremap <buffer> <silent> \rd :call Perl_Debugger()
noremap <buffer> <silent> \rw :call Perl_PerlSwitches()
noremap <buffer> <silent> \ra :call Perl_Arguments()
noremap <buffer> <silent> \rs :call Perl_SyntaxCheck():redraw!:call Perl_SyntaxCheckMsg()
noremap <buffer> <silent> \rr :call Perl_Run()
nnoremap <buffer> <silent> \px a[:xdigit:]
nnoremap <buffer> <silent> \pw a[:word:]
nnoremap <buffer> <silent> \pu a[:upper:]
nnoremap <buffer> <silent> \ps a[:space:]
nnoremap <buffer> <silent> \pn a[:punct:]
nnoremap <buffer> <silent> \pp a[:print:]
nnoremap <buffer> <silent> \pl a[:lower:]
nnoremap <buffer> <silent> \pg a[:graph:]
nnoremap <buffer> <silent> \pd a[:digit:]
nnoremap <buffer> <silent> \pc a[:cntrl:]
nnoremap <buffer> <silent> \pb a[:blank:]
nnoremap <buffer> <silent> \pi a[:ascii:]
nnoremap <buffer> <silent> \ph a[:alpha:]
nnoremap <buffer> <silent> \pa a[:alnum:]
vnoremap <buffer> <silent> \xe :call Perl_RegexExplain( "v" )
nnoremap <buffer> <silent> \xe :call Perl_RegexExplain( "n" )
nnoremap <buffer> <silent> \xm :call Perl_RegexVisualize( )
vnoremap <buffer> <silent> \xf :call Perl_RegexPickFlag( "v" )'>j
vnoremap <buffer> <silent> \xs :call Perl_RegexPick( "string", "v" )'>j
vnoremap <buffer> <silent> \xr :call Perl_RegexPick( "regexp", "v" )'>j
nnoremap <buffer> <silent> \xf :call Perl_RegexPickFlag( "n" )
nnoremap <buffer> <silent> \xs :call Perl_RegexPick( "string", "n" )j
nnoremap <buffer> <silent> \xr :call Perl_RegexPick( "regexp", "n" )j
vnoremap <buffer> <silent> \isu :call Perl_Subroutine("v")f(a
vnoremap <buffer> <silent> \ipi :call Perl_OpenPipe("v")a
vnoremap <buffer> <silent> \io :call Perl_OpenOutputFile("v")a
vnoremap <buffer> <silent> \ii :call Perl_OpenInputFile("v")a
nnoremap <buffer> <silent> \isu :call Perl_Subroutine("a")A
nnoremap <buffer> <silent> \ipi :call Perl_OpenPipe("a")a
nnoremap <buffer> <silent> \io :call Perl_OpenOutputFile("a")a
nnoremap <buffer> <silent> \ii :call Perl_OpenInputFile("a")a
nnoremap <buffer> <silent> \ip aprint "\n";<Left><Left><Left><Left>
nnoremap <buffer> <silent> \it a$ =~ tr///F$a
nnoremap <buffer> <silent> \is a$ =~ s///F$a
nnoremap <buffer> <silent> \im a$ =~ m//F$a
nnoremap <buffer> <silent> \ir omy	$rgx_	= q//;F_a
nnoremap <buffer> <silent> \%= o:call Perl_Idiom( '\%=', 'my	%	= (  => ,  => , );', '%' )a
nnoremap <buffer> <silent> \% o:call Perl_Idiom(  '\%', 'my	%;',                       '%' )a
nnoremap <buffer> <silent> \@= o:call Perl_Idiom( '\@=', 'my	@	= ( , ,  );',        '@' )a
nnoremap <buffer> <silent> \@ o:call Perl_Idiom(  '\@', 'my	@;',                       '@' )a
nnoremap <buffer> <silent> \$$ o:call Perl_Idiom( '\$$', 'my	( $, $ );',                '$' )a
nnoremap <buffer> <silent> \$= o:call Perl_Idiom( '\$=', 'my	$	= ;',                '$' )a
nnoremap <buffer> <silent> \$ o:call Perl_Idiom(  '\$', 'my	$;',                       '$' )a
nnoremap <buffer> <silent> \ne :call Perl_CodeSnippet("e")
vnoremap <buffer> <silent> \nw :call Perl_CodeSnippet("wv")
nnoremap <buffer> <silent> \nw :call Perl_CodeSnippet("w")
nnoremap <buffer> <silent> \nr :call Perl_CodeSnippet("r")
vnoremap <buffer> <silent> \s{ :call Perl_Block("v")
vnoremap <buffer> <silent> \sw :call Perl_StatBlock( "v", "while (  ) {", "}" )f(la
vnoremap <buffer> <silent> \st :call Perl_StatBlock( "v", "until (  ) {", "}" )f(la
vnoremap <buffer> <silent> \sue :call Perl_StatBlock( "v", "unless (  ) {", "}\nelse {\n}" )f(la
vnoremap <buffer> <silent> \su :call Perl_StatBlock( "v", "unless (  ) {", "}" )f(la
vnoremap <buffer> <silent> \sie :call Perl_StatBlock( "v", "if (  ) {", "}\nelse {\n}" )f(la
vnoremap <buffer> <silent> \si :call Perl_StatBlock( "v", "if (  ) {", "}" )f(la
vnoremap <buffer> <silent> \sfe :call Perl_StatBlock( "v", "foreach my $ (  ) {", "}" )f$a
vnoremap <buffer> <silent> \sf :call Perl_StatBlock( "v", "for ( my $; ;  ) {", "}" )f$a
vnoremap <buffer> <silent> \sd :call Perl_DoWhile("v")f(la
nnoremap <buffer> <silent> \s{ :call Perl_Block("a")o
nnoremap <buffer> <silent> \sw :call Perl_StatBlock( "a", "while (  ) {\n}", "" )f(la
nnoremap <buffer> <silent> \st :call Perl_StatBlock( "a", "until (  ) {\n}", "" )f(la
nnoremap <buffer> <silent> \sue :call Perl_StatBlock( "a", "unless (  ) {\n}\nelse {\n}", "" )f(la
nnoremap <buffer> <silent> \su :call Perl_StatBlock( "a", "unless (  ) {\n}", "" )f(la
nnoremap <buffer> <silent> \sie :call Perl_StatBlock( "a", "if (  ) {\n}\nelse {\n}", "" )f(la
nnoremap <buffer> <silent> \si :call Perl_StatBlock( "a", "if (  ) {\n}", "" )f(la
nnoremap <buffer> <silent> \sfe :call Perl_StatBlock( "a", "foreach my $ (  ) {\n}", "" )f$a
nnoremap <buffer> <silent> \sf :call Perl_StatBlock( "a", "for ( my $; ;  ) {\n}","" )f$a
nnoremap <buffer> <silent> \sd :call Perl_DoWhile("a")f(la
nnoremap <buffer> <silent> \cn :call Perl_UncommentBlock()
vnoremap <buffer> <silent> \cb :call Perl_CommentBlock("v")
nnoremap <buffer> <silent> \cb :call Perl_CommentBlock("a")
nnoremap <buffer> <silent> \cv :call Perl_CommentVimModeline()
nnoremap <buffer> <silent> \ct a=strftime("%x %X %Z")
nnoremap <buffer> <silent> \cd a=strftime("%x")
vnoremap <buffer> <silent> \cc :'<,'>call Perl_CommentToggle()j
nnoremap <buffer> <silent> \cc :call Perl_CommentToggle()j
nnoremap <buffer> <silent> \ckn :call Perl_CommentClassified("")          3F:i
nnoremap <buffer> <silent> \cko :call Perl_CommentClassified("WORKAROUND")A
nnoremap <buffer> <silent> \ckw :call Perl_CommentClassified("WARNING")   A
nnoremap <buffer> <silent> \ckr :call Perl_CommentClassified("TRICKY")    A
nnoremap <buffer> <silent> \ckt :call Perl_CommentClassified("TODO")      A
nnoremap <buffer> <silent> \ckb :call Perl_CommentClassified("BUG")       A
nnoremap <buffer> <silent> \ca :call Perl_CommentTemplates('test')
nnoremap <buffer> <silent> \ce :call Perl_CommentTemplates('module')
nnoremap <buffer> <silent> \ch :call Perl_CommentTemplates('header')
nnoremap <buffer> <silent> \cm :call Perl_CommentTemplates('method')
nnoremap <buffer> <silent> \cfu :call Perl_CommentTemplates('function')
nnoremap <buffer> <silent> \cfr :call Perl_CommentTemplates('frame')
nnoremap <buffer> <silent> \cs :call Perl_GetLineEndCommCol()
vnoremap <buffer> <silent> \cl :call Perl_MultiLineEndComments()A
vnoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("v")
nnoremap <buffer> <silent> \cl :call Perl_LineEndComment("")A
nnoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("a")
noremap <buffer> <silent> <F9> :call Perl_Debugger()
map <buffer> <silent> <S-F1> :call Perl_perldoc()
map <buffer> <silent> <S-F9> :call Perl_Arguments()
map <buffer> <silent> <C-F9> :call Perl_Run()
map <buffer> <silent> <M-F9> :call Perl_SyntaxCheck():redraw!:call Perl_SyntaxCheckMsg()
imap <buffer> <silent> \ro :call Perl_Toggle_Gvim_Xterm()
inoremap <buffer> <silent> \re :call Perl_MakeScriptExecutable()
inoremap <buffer> <silent> \rw :call Perl_PerlSwitches()
inoremap <buffer> <silent> \ra :call Perl_Arguments()
inoremap <buffer> <silent> \rs :call Perl_SyntaxCheck():redraw!:call Perl_SyntaxCheckMsg()
inoremap <buffer> <silent> \rr :call Perl_Run()
inoremap <buffer> <silent> \px [:xdigit:]
inoremap <buffer> <silent> \pw [:word:]
inoremap <buffer> <silent> \pu [:upper:]
inoremap <buffer> <silent> \ps [:space:]
inoremap <buffer> <silent> \pn [:punct:]
inoremap <buffer> <silent> \pp [:print:]
inoremap <buffer> <silent> \pl [:lower:]
inoremap <buffer> <silent> \pg [:graph:]
inoremap <buffer> <silent> \pd [:digit:]
inoremap <buffer> <silent> \pc [:cntrl:]
inoremap <buffer> <silent> \pb [:blank:]
inoremap <buffer> <silent> \pi [:ascii:]
inoremap <buffer> <silent> \ph [:alpha:]
inoremap <buffer> <silent> \pa [:alnum:]
inoremap <buffer> <silent> \isu :call Perl_Subroutine("a")A
inoremap <buffer> <silent> \ipi :call Perl_OpenPipe("a")a
inoremap <buffer> <silent> \io :call Perl_OpenOutputFile("a")a
inoremap <buffer> <silent> \ii :call Perl_OpenInputFile("a")a
inoremap <buffer> <silent> \ip print "\n";<Left><Left><Left><Left>
inoremap <buffer> <silent> \it $ =~ tr///F$a
inoremap <buffer> <silent> \is $ =~ s///F$a
inoremap <buffer> <silent> \im $ =~ m//F$a
inoremap <buffer> <silent> \ir my	$rgx_	= q//;F_a
inoremap <buffer> <silent> \%= :call Perl_Idiom( '\%=', 'my	%	= (  => ,  => , );', '%' )a
inoremap <buffer> <silent> \% :call Perl_Idiom(  '\%', 'my	%;',                       '%' )a
inoremap <buffer> <silent> \@= :call Perl_Idiom( '\@=', 'my	@	= ( , ,  );',        '@' )a
inoremap <buffer> <silent> \@ :call Perl_Idiom(  '\@', 'my	@;',                       '@' )a
inoremap <buffer> <silent> \$$ :call Perl_Idiom( '\$$', 'my	( $, $ );',                '$' )a
inoremap <buffer> <silent> \$= :call Perl_Idiom( '\$=', 'my	$	= ;',                '$' )a
inoremap <buffer> <silent> \$ :call Perl_Idiom(  '\$', 'my	$;',                       '$' )a
inoremap <buffer> <silent> \sw :call Perl_StatBlock( "a", "while (  ) {\n}", "" )f(la
inoremap <buffer> <silent> \st :call Perl_StatBlock( "a", "until (  ) {\n}", "" )f(la
inoremap <buffer> <silent> \sue :call Perl_StatBlock( "a", "unless (  ) {\n}\nelse {\n}", "" )f(la
inoremap <buffer> <silent> \su :call Perl_StatBlock( "a", "unless (  ) {\n}", "" )f(la
inoremap <buffer> <silent> \sie :call Perl_StatBlock( "a", "if (  ) {\n}\nelse {\n}", "" )f(la
inoremap <buffer> <silent> \si :call Perl_StatBlock( "a", "if (  ) {\n}", "" )f(la
inoremap <buffer> <silent> \sfe :call Perl_StatBlock( "a", "foreach my $ (  ) {\n}", "" )f$a
inoremap <buffer> <silent> \sf :call Perl_StatBlock( "a", "for ( my $; ;  ) {\n}","" )f$a
inoremap <buffer> <silent> \sd :call Perl_DoWhile("a")f(la
inoremap <buffer> <silent> \ct =strftime("%x %X %Z")
inoremap <buffer> <silent> \cd =strftime("%x")
inoremap <buffer> <silent> \ckn :call Perl_CommentClassified("")          3F:i
inoremap <buffer> <silent> \cko :call Perl_CommentClassified("WORKAROUND")A
inoremap <buffer> <silent> \ckw :call Perl_CommentClassified("WARNING")   A
inoremap <buffer> <silent> \ckr :call Perl_CommentClassified("TRICKY")    A
inoremap <buffer> <silent> \ckt :call Perl_CommentClassified("TODO")      A
inoremap <buffer> <silent> \ckb :call Perl_CommentClassified("BUG")       A
inoremap <buffer> <silent> \ca :call Perl_CommentTemplates('test')
inoremap <buffer> <silent> \ce :call Perl_CommentTemplates('module')
inoremap <buffer> <silent> \ch :call Perl_CommentTemplates('header')
inoremap <buffer> <silent> \cm :call Perl_CommentTemplates('method')
inoremap <buffer> <silent> \cfu :call Perl_CommentTemplates('function')
inoremap <buffer> <silent> \cfr :call Perl_CommentTemplates('frame')
inoremap <buffer> <silent> \cl :call Perl_LineEndComment("")A
inoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("a")a
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal comments=:#
setlocal commentstring=#%s
setlocal complete=.,w,b,u,t,i,k
setlocal completefunc=
setlocal nocopyindent
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=[^A-Za-z_]
setlocal dictionary=~/.vim/perl-support/wordlists/perl.list
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'perl'
setlocal filetype=perl
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcrq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=\\<\\(use\\|require\\)\\>
setlocal includeexpr=substitute(substitute(v:fname,'::','/','g'),'$','.pm','')
setlocal indentexpr=GetPerlIndent()
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e,0=,0),0=or,0=and
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255,:
setlocal keywordprg=perldoc\ -f
setlocal nolinebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:],<:>
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=/etc/perl,/usr/local/lib/perl/5.8.8,/usr/local/share/perl/5.8.8,/usr/lib/perl5,/usr/share/perl5,/usr/lib/perl/5.8,/usr/share/perl/5.8,/usr/local/lib/site_perl,,
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'perl'
setlocal syntax=perl
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=78
setlocal thesaurus=
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 108 - ((15 * winheight(0) + 20) / 41)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
108
normal! 011l
tabnext 1
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToO
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . s:sx
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
